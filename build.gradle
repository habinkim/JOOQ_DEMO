import org.jooq.meta.jaxb.*

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'dev.monosoul.jooq-docker' version '6.0.14'
}


ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('generated', file("src/main/generated"))
    mapstructVersion = '1.6.3'
    jooqVersion = '3.19.8'
}

jooq {
    version = "${jooqVersion}"
    withContainer {
        image {
            name = "mysql:latest"
            envVars = [
                    MYSQL_ROOT_PASSWORD: "1234",
                    MYSQL_DATABASE     : "sakila"
            ]
        }

        db {
            username = "root"
            password = "1234"
            name = "sakila"
            port = 3306
            jdbc {
                schema = "jdbc:mysql"
                driverClassName = "com.mysql.cj.jdbc.Driver"
            }
        }
    }
}

tasks {
    generateJooqClasses {
        schemas.set(["sakila"])
        outputDirectory.set(project.layout.projectDirectory.dir("src/generated"))
        includeFlywayTable.set(false)

        usingJavaConfig {
            generate = new Generate()
                    .withJavaTimeTypes(true)
                    .withDeprecated(false)
                    .withDaos(true)
                    .withFluentSetters(true)
                    .withRecords(true)

            withStrategy(
                    new Strategy().withName("com.habin.configuration.JPrefixGeneratorStrategy")
            )

            database.withForcedTypes(
                    new ForcedType()
                            .withUserType("java.lang.Long")
                            .withTypes("int unsigned"),
                    new ForcedType()
                            .withUserType("java.lang.Integer")
                            .withTypes("tinyint unsigned"),
                    new ForcedType()
                            .withUserType("java.lang.Integer")
                            .withTypes("smallint unsigned")
            )
        }
    }
}

group = 'com.habin'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    implementation "org.jooq:jooq:${jooqVersion}"

    jooqCodegen project(":configuration")
    jooqCodegen "org.jooq:jooq:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-codegen:${jooqVersion}"

    jooqCodegen 'org.flywaydb:flyway-core:10.8.1'
    jooqCodegen 'org.flywaydb:flyway-mysql:10.8.1'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    annotationProcessor (
        'org.springframework.boot:spring-boot-configuration-processor',
        'org.projectlombok:lombok',
        "org.mapstruct:mapstruct-processor:${mapstructVersion}",
        'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    )

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}
